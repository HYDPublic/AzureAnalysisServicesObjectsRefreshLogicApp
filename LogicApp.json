{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "logicAppName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 80,
            "metadata": {
                "description": "Name of the Logic App."
            }
        },
        "logicAppLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "[resourceGroup().location]",
                "australiaeast",
                "australiasoutheast",
                "brazilsouth",
                "centralus",
                "eastasia",
                "eastus",
                "eastus2",
                "japaneast",
                "japanwest",
                "northcentralus",
                "northeurope",
                "southcentralus",
                "southeastasia",
                "westeurope",
                "westus"
            ],
            "metadata": {
                "description": "Location of the Logic App."
            }
        },
        "analysisServicesLocation": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "allowedValues": [
                "[resourceGroup().location]",
                "australiaeast",
                "australiasoutheast",
                "brazilsouth",
                "centralus",
                "eastasia",
                "eastus",
                "eastus2",
                "japaneast",
                "japanwest",
                "northcentralus",
                "northeurope",
                "southcentralus",
                "southeastasia",
                "westeurope",
                "westus"
            ],
            "metadata": {
                "description": "Location of the Analysis Services instance."
            }
        },
        "analysisServicesName": {
            "type": "string",
            "minLength": 1,
            "maxLength": 80,
            "metadata": {
                "description": "Name of the Analysis Services instance."
            }
        },
        "analysisServicesModelName": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Name of the AAS model to refresh."
            }
        },
        "analysisServicesResourceGroupName": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "minLength": 1,
            "metadata": {
                "description": "Name of the resource group that contains the Analysis Services instance. Only needed when it differs from the Logic App resource group."
            }
        },
        "analysisServicesScaleUpTier": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Developer",
                "Basic",
                "Standard"
            ],
            "metadata": {
                "description": "Service tier to scale up to before refreshing the model."
            }
        },
        "analysisServicesScaleUpLevel": {
            "type": "string",
            "defaultValue": "B2",
            "allowedValues": [
                "D1",
                "B1",
                "B2",
                "S0",
                "S1",
                "S2",
                "S4",
                "S8",
                "S9"
            ],
            "metadata": {
                "description": "Service tier level to scale up to before refreshing the model."
            }
        },
        "analysisServicesScaleDownTier": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Developer",
                "Basic",
                "Standard"
            ],
            "metadata": {
                "description": "Service tier to scale down to after refreshing the model."
            }
        },
        "analysisServicesScaleDownLevel": {
            "type": "string",
            "defaultValue": "B1",
            "allowedValues": [
                "D1",
                "B1",
                "B2",
                "S0",
                "S1",
                "S2",
                "S4",
                "S8",
                "S9"
            ],
            "metadata": {
                "description": "Service tier level to scale down to after refreshing the model."
            }
        },
        "servicePrincipalClientId": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Service Principal Client ID."
            }
        },
        "servicePrincipalClientSecret": {
            "type": "securestring",
            "minLength": 1,
            "metadata": {
                "description": "Service Principal Client Secret."
            }
        },
        "azureActiveDirectoryTenantId": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Azure AD Tenant ID."
            }
        }
    },
    "variables": {
        "analysisServicesArmUri": "[concat('https://management.azure.com', resourceId(subscription().subscriptionId, parameters('analysisServicesResourceGroupName'), 'Microsoft.AnalysisServices/servers' , parameters('analysisServicesName')), '?api-version=2016-05-16')]",
        "analysisServicesRefreshUri": "[concat('https://', parameters('analysisServicesLocation'), '.asazure.windows.net/servers/', parameters('analysisServicesName'), '/models/', parameters('analysisServicesModelName'), '/refreshes')]"
    },
    "resources": [{
        "name": "[parameters('logicAppName')]",
        "type": "Microsoft.Logic/workflows",
        "location": "[parameters('logicAppLocation')]",
        "tags": {
            "displayName": "LogicApp"
        },
        "apiVersion": "2016-06-01",
        "properties": {
            "definition": {
                "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                "actions": {
                    "If_processing_was_unsuccessful": {
                        "actions": {
                            "Terminate": {
                                "inputs": {
                                    "runError": {
                                        "code": "500",
                                        "message": "Refresh failed with unknown status."
                                    },
                                    "runStatus": "Failed"
                                },
                                "runAfter": {},
                                "type": "Terminate"
                            }
                        },
                        "expression": {
                            "and": [
                                {
                                    "not": {
                                        "equals": [
                                            "@variables('processingWasSuccessful')",
                                            "@true"
                                        ]
                                    }
                                }
                            ]
                        },
                        "runAfter": {
                            "Scale_down_AAS": [
                                "Succeeded"
                            ]
                        },
                        "type": "If"
                    },
                    "Initialize_processingFinished_variable": {
                        "inputs": {
                            "variables": [
                                {
                                    "name": "processingFinished",
                                    "type": "Boolean",
                                    "value": "@false"
                                }
                            ]
                        },
                        "runAfter": {
                            "Initialize_upscalingFinished_variable": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable"
                    },
                    "Initialize_processingWasSuccessful_variable": {
                        "inputs": {
                            "variables": [
                                {
                                    "name": "processingWasSuccessful",
                                    "type": "Boolean",
                                    "value": "@false"
                                }
                            ]
                        },
                        "runAfter": {
                            "Initialize_processingFinished_variable": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable"
                    },
                    "Initialize_upscalingFinished_variable": {
                        "description": "This variable is used to stop the 'do untill' loop statement when upscaling of AAS is finished.",
                        "inputs": {
                            "variables": [
                                {
                                    "name": "upscalingFinished",
                                    "type": "Boolean",
                                    "value": "@false"
                                }
                            ]
                        },
                        "runAfter": {},
                        "type": "InitializeVariable"
                    },
                    "POST_refresh": {
                        "description": "With this HTTP POST request to the AAS REST API we trigger a full refresh of the model. This refresh happens async. The Logic App will handle this correctly and will continue when the refresh is finished.",
                        "inputs": {
                            "authentication": {
                                "audience": "https://*.asazure.windows.net",
                                "clientId": "[parameters('servicePrincipalClientId')]",
                                "secret": "[parameters('servicePrincipalClientSecret')]",
                                "tenant": "[parameters('azureActiveDirectoryTenantId')]",
                                "type": "ActiveDirectoryOAuth"
                            },
                            "body": {
                                "CommitMode": "transactional",
                                "MaxParallelism": 2,
                                "Objects": [],
                                "RetryCount": 2,
                                "Type": "Full"
                            },
                            "method": "POST",
                            "uri": "[variables('analysisServicesRefreshUri')]"
                        },
                        "operationOptions": "DisableAsyncPattern",
                        "runAfter": {
                            "Until_scaling_is_finished": [
                                "Succeeded"
                            ]
                        },
                        "type": "Http"
                    },
                    "Scale_down_AAS": {
                        "description": "With this HTTP PATCH request to the Azure Resource Management API we scale up the AAS instance. This action should always run.",
                        "inputs": {
                            "authentication": {
                                "audience": "https://management.core.windows.net/",
                                "clientId": "[parameters('servicePrincipalClientId')]",
                                "secret": "[parameters('servicePrincipalClientSecret')]",
                                "tenant": "[parameters('azureActiveDirectoryTenantId')]",
                                "type": "ActiveDirectoryOAuth"
                            },
                            "body": {
                                "sku": {
                                    "name": "B1",
                                    "tier": "Basic"
                                }
                            },
                            "method": "PATCH",
                            "uri": "[variables('analysisServicesArmUri')]"
                        },
                        "runAfter": {
                            "Until_processing_is_finished": [
                                "Succeeded"
                            ]
                        },
                        "type": "Http"
                    },
                    "Scale_up_AAS": {
                        "description": "With this HTTP PATCH request to the Azure Resource Management API we scale up the AAS instance.",
                        "inputs": {
                            "authentication": {
                                "audience": "https://management.core.windows.net/",
                                "clientId": "[parameters('servicePrincipalClientId')]",
                                "secret": "[parameters('servicePrincipalClientSecret')]",
                                "tenant": "[parameters('azureActiveDirectoryTenantId')]",
                                "type": "ActiveDirectoryOAuth"
                            },
                            "body": {
                                "sku": {
                                    "name": "B2",
                                    "tier": "Basic"
                                }
                            },
                            "method": "PATCH",
                            "uri": "[variables('analysisServicesArmUri')]"
                        },
                        "runAfter": {
                            "Initialize_processingWasSuccessful_variable": [
                                "Succeeded"
                            ]
                        },
                        "type": "Http"
                    },
                    "Until_processing_is_finished": {
                        "actions": {
                            "Delay_to_wait_for_processing": {
                                "inputs": {
                                    "interval": {
                                        "count": 30,
                                        "unit": "Second"
                                    }
                                },
                                "runAfter": {},
                                "type": "Wait"
                            },
                            "GET_refresh_status": {
                                "inputs": {
                                    "authentication": {
                                        "audience": "https://*.asazure.windows.net",
                                        "clientId": "[parameters('servicePrincipalClientId')]",
                                        "secret": "[parameters('servicePrincipalClientSecret')]",
                                        "tenant": "[parameters('azureActiveDirectoryTenantId')]",
                                        "type": "ActiveDirectoryOAuth"
                                    },
                                    "method": "GET",
                                    "uri": "@{outputs('POST_refresh')?['Headers']?['Location']}"
                                },
                                "runAfter": {
                                    "Delay_to_wait_for_processing": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "Http"
                            },
                            "Parse_GET_refresh_status": {
                                "inputs": {
                                    "content": "@body('GET_refresh_status')",
                                    "schema": {
                                        "properties": {
                                            "currentRefreshType": {
                                                "type": "string"
                                            },
                                            "endTime": {
                                                "type": "string"
                                            },
                                            "startTime": {
                                                "type": "string"
                                            },
                                            "status": {
                                                "type": "string"
                                            },
                                            "type": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "runAfter": {
                                    "GET_refresh_status": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "ParseJson"
                            },
                            "Switch_on_processing_status": {
                                "cases": {
                                    "Case:_in_progress": {
                                        "actions": {},
                                        "case": "inProgress"
                                    },
                                    "Case:_not_started": {
                                        "actions": {},
                                        "case": "notStarted"
                                    },
                                    "Case:_success": {
                                        "actions": {
                                            "Set_processingFinished_variable_to_true": {
                                                "inputs": {
                                                    "name": "processingFinished",
                                                    "value": "@true"
                                                },
                                                "runAfter": {},
                                                "type": "SetVariable"
                                            },
                                            "Set_processingWasSuccessful_to_true": {
                                                "inputs": {
                                                    "name": "processingWasSuccessful",
                                                    "value": "@true"
                                                },
                                                "runAfter": {
                                                    "Set_processingFinished_variable_to_true": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "SetVariable"
                                            }
                                        },
                                        "case": "succeeded"
                                    }
                                },
                                "default": {
                                    "actions": {
                                        "Set_processingFinished_to_true_after_unknown_status": {
                                            "inputs": {
                                                "name": "processingFinished",
                                                "value": "@true"
                                            },
                                            "runAfter": {},
                                            "type": "SetVariable"
                                        },
                                        "Set_processingWasSuccessful_to_false": {
                                            "inputs": {
                                                "name": "processingWasSuccessful",
                                                "value": "@false"
                                            },
                                            "runAfter": {
                                                "Set_processingFinished_to_true_after_unknown_status": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type": "SetVariable"
                                        }
                                    }
                                },
                                "expression": "@body('Parse_GET_refresh_status')?['status']",
                                "runAfter": {
                                    "Parse_GET_refresh_status": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "Switch"
                            }
                        },
                        "expression": "@equals(variables('processingFinished'), true)",
                        "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                        },
                        "runAfter": {
                            "POST_refresh": [
                                "Succeeded"
                            ]
                        },
                        "type": "Until"
                    },
                    "Until_scaling_is_finished": {
                        "actions": {
                            "Check_whether_scaling_is_finished": {
                                "actions": {
                                    "Set_variable": {
                                        "inputs": {
                                            "name": "upscalingFinished",
                                            "value": "@true"
                                        },
                                        "runAfter": {},
                                        "type": "SetVariable"
                                    }
                                },
                                "expression": "@equals(body('Parse_AAS_scaling_status')?['properties']?['provisioningState'], 'Succeeded')",
                                "runAfter": {
                                    "Parse_AAS_scaling_status": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "If"
                            },
                            "Delay": {
                                "inputs": {
                                    "interval": {
                                        "count": 30,
                                        "unit": "Second"
                                    }
                                },
                                "runAfter": {},
                                "type": "Wait"
                            },
                            "GET_AAS_scaling_status": {
                                "inputs": {
                                    "authentication": {
                                        "audience": "https://management.core.windows.net/",
                                        "clientId": "[parameters('servicePrincipalClientId')]",
                                        "secret": "[parameters('servicePrincipalClientSecret')]",
                                        "tenant": "[parameters('azureActiveDirectoryTenantId')]",
                                        "type": "ActiveDirectoryOAuth"
                                    },
                                    "method": "GET",
                                    "uri": "[variables('analysisServicesArmUri')]"
                                },
                                "runAfter": {
                                    "Delay": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "Http"
                            },
                            "Parse_AAS_scaling_status": {
                                "inputs": {
                                    "content": "@body('GET_AAS_scaling_status')",
                                    "schema": {
                                        "properties": {
                                            "id": {
                                                "type": "string"
                                            },
                                            "location": {
                                                "type": "string"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "properties": {
                                                "properties": {
                                                    "asAdministrators": {
                                                        "properties": {
                                                            "members": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "managedMode": {
                                                        "type": "number"
                                                    },
                                                    "provisioningState": {
                                                        "type": "string"
                                                    },
                                                    "serverFullName": {
                                                        "type": "string"
                                                    },
                                                    "serverMonitorMode": {
                                                        "type": "number"
                                                    },
                                                    "state": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "sku": {
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "tier": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "tags": {
                                                "properties": {},
                                                "type": "object"
                                            },
                                            "type": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "runAfter": {
                                    "GET_AAS_scaling_status": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "ParseJson"
                            }
                        },
                        "expression": "@equals(variables('upscalingFinished'), true)",
                        "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                        },
                        "runAfter": {
                            "Scale_up_AAS": [
                                "Succeeded"
                            ]
                        },
                        "type": "Until"
                    }
                },
                "contentVersion": "1.0.0.0",
                "outputs": {},
                "parameters": {},
                "triggers": {
                    "manual": {
                        "description": "This is the actual trigger for the Logic App. Can be triggered manually or via an HTTP POST request.",
                        "inputs": {
                            "schema": {}
                        },
                        "kind": "Http",
                        "type": "Request"
                    }
                }
            },
            "parameters": {}
        }
    }],
    "outputs": {}
}