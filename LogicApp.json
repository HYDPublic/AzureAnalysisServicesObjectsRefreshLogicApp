{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "logicAppName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 80,
        "metadata": {
          "description": "Name of the Logic App."
        }
      },
      "logicAppLocation": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "allowedValues": [
          "[resourceGroup().location]",
          "australiaeast",
          "australiasoutheast",
          "brazilsouth",
          "centralus",
          "eastasia",
          "eastus",
          "eastus2",
          "japaneast",
          "japanwest",
          "northcentralus",
          "northeurope",
          "southcentralus",
          "southeastasia",
          "westeurope",
          "westus"
        ],
        "metadata": {
          "description": "Location of the Logic App."
        }
      },
      "analysisServicesLocation": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "allowedValues": [
          "[resourceGroup().location]",
          "australiaeast",
          "australiasoutheast",
          "brazilsouth",
          "centralus",
          "eastasia",
          "eastus",
          "eastus2",
          "japaneast",
          "japanwest",
          "northcentralus",
          "northeurope",
          "southcentralus",
          "southeastasia",
          "westeurope",
          "westus"
        ],
        "metadata": {
          "description": "Location of the Analysis Services instance."
        }
      },
      "analysisServicesName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 80,
        "metadata": {
          "description": "Name of the Analysis Services instance."
        }
      },
      "analysisServicesModelName": {
        "type": "string",
        "minLength": 1,
        "metadata": {
          "description": "Name of the AAS model to refresh."
        }
      },
      "analysisServicesResourceGroupName": {
        "type": "string",
        "defaultValue": "[resourceGroup().name]",
        "minLength": 1,
        "metadata": {
          "description": "Name of the resource group that contains the Analysis Services instance. Only needed when it differs from the Logic App resource group."
        }
      },
      "analysisServicesScaleUpTier": {
        "type": "string",
        "defaultValue": "Basic",
        "allowedValues": [
          "Developer",
          "Basic",
          "Standard"
        ],
        "metadata": {
          "description": "Service tier to scale up to before refreshing the model."
        }
      },
      "analysisServicesScaleUpLevel": {
        "type": "string",
        "defaultValue": "B2",
        "allowedValues": [
          "D1",
          "B1",
          "B2",
          "S0",
          "S1",
          "S2",
          "S4",
          "S8",
          "S9"
        ],
        "metadata": {
          "description": "Service tier level to scale up to before refreshing the model."
        }
      },
      "analysisServicesScaleDownTier": {
        "type": "string",
        "defaultValue": "Basic",
        "allowedValues": [
          "Developer",
          "Basic",
          "Standard"
        ],
        "metadata": {
          "description": "Service tier to scale down to after refreshing the model."
        }
      },
      "analysisServicesScaleDownLevel": {
        "type": "string",
        "defaultValue": "B1",
        "allowedValues": [
          "D1",
          "B1",
          "B2",
          "S0",
          "S1",
          "S2",
          "S4",
          "S8",
          "S9"
        ],
        "metadata": {
          "description": "Service tier level to scale down to after refreshing the model."
        }
      },
      "servicePrincipalClientId": {
        "type": "string",
        "minLength": 1,
        "metadata": {
          "description": "Service Principal Client ID."
        }
      },
      "servicePrincipalClientSecret": {
        "type": "securestring",
        "minLength": 1,
        "metadata": {
          "description": "Service Principal Client Secret."
        }
      },
      "azureActiveDirectoryTenantId": {
        "type": "string",
        "minLength": 1,
        "metadata": {
          "description": "Azure AD Tenant ID."
        }
      }
    },
    "variables": {
        "singlequote": "'",
        "analysisServicesArmUri": "[concat('https://management.azure.com', resourceId(subscription().subscriptionId, parameters('analysisServicesResourceGroupName'), 'Microsoft.AnalysisServices/servers' , parameters('analysisServicesName')), '?api-version=2016-05-16')]",
        "analysisServicesRefreshUri": "[concat('https://', parameters('analysisServicesLocation'), '.asazure.windows.net/servers/', parameters('analysisServicesName'), '/models/', parameters('analysisServicesModelName'), '/refreshes')]"
    },
    "resources": [
      {
        "name": "[parameters('logicAppName')]",
        "type": "Microsoft.Logic/workflows",
        "location": "[parameters('logicAppLocation')]",
        "tags": {
          "displayName": "LogicApp"
        },
        "apiVersion": "2016-06-01",
        "properties": {
            "definition": {
                "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                "actions": {
                    "Check_if_POST_refresh_was_not_conflicting": {
                        "actions": {
                            "Check_if_refreshId_was_found": {
                                "actions": {
                                    "Do_until_processing_is_finished": {
                                        "actions": {
                                            "Check_if_processing_has_ended": {
                                                "actions": {
                                                    "Check_whether_refresh_finished_successful": {
                                                        "actions": {},
                                                        "description": "Todo: decide what to do when refresh was successful or not",
                                                        "expression": "@equals(body('Parse_refresh_status')?['status'], 'succeeded')",
                                                        "runAfter": {
                                                            "Set_processingFinished_variable_to_true": [
                                                                "Succeeded"
                                                            ]
                                                        },
                                                        "type": "If"
                                                    },
                                                    "Set_processingFinished_variable_to_true": {
                                                        "inputs": {
                                                            "name": "processingFinished",
                                                            "value": "@true"
                                                        },
                                                        "runAfter": {},
                                                        "type": "SetVariable"
                                                    }
                                                },
                                                "expression": "@not(equals(body('Parse_refresh_status')?['endTime'], null))",
                                                "runAfter": {
                                                    "Parse_refresh_status": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "If"
                                            },
                                            "Delay_1_minute": {
                                                "inputs": {
                                                    "interval": {
                                                        "count": 1,
                                                        "unit": "Minute"
                                                    }
                                                },
                                                "runAfter": {},
                                                "type": "Wait"
                                            },
                                            "GET_refresh_status_by_refresh_id": {
                                                "inputs": {
                                                    "authentication": {
                                                        "audience": "https://*.asazure.windows.net",
                                                        "clientId": "[parameters('servicePrincipalClientId')]",
                                                        "secret": "[parameters('servicePrincipalClientSecret')]",
                                                        "tenant": "[parameters('azureActiveDirectoryTenantId')]",
                                                        "type": "ActiveDirectoryOAuth"
                                                    },
                                                    "method": "GET",
                                                    "uri": "[concat(variables('analysisServicesRefreshUri'), '/', '@{variables(', variables('singlequote'), 'refreshId', variables('singlequote'), ')}')]"
                                                },
                                                "runAfter": {
                                                    "Delay_1_minute": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "Http"
                                            },
                                            "Parse_refresh_status": {
                                                "inputs": {
                                                    "content": "@body('GET_refresh_status_by_refresh_id')",
                                                    "schema": {
                                                        "properties": {
                                                            "currentRefreshType": {
                                                                "type": "string"
                                                            },
                                                            "endTime": {
                                                                "type": "string"
                                                            },
                                                            "messages": {
                                                                "items": {
                                                                    "properties": {
                                                                        "message": {
                                                                            "type": "string"
                                                                        },
                                                                        "type": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "objects": {
                                                                "items": {
                                                                    "properties": {
                                                                        "status": {
                                                                            "type": "string"
                                                                        }
                                                                    },
                                                                    "type": "object"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "startTime": {
                                                                "type": "string"
                                                            },
                                                            "status": {
                                                                "type": "string"
                                                            },
                                                            "type": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "runAfter": {
                                                    "GET_refresh_status_by_refresh_id": [
                                                        "Succeeded"
                                                    ]
                                                },
                                                "type": "ParseJson"
                                            }
                                        },
                                        "expression": "@equals(variables('processingFinished'), true)",
                                        "limit": {
                                            "count": 60,
                                            "timeout": "PT1H"
                                        },
                                        "runAfter": {},
                                        "type": "Until"
                                    }
                                },
                                "description": "When refreshId was not found something went wrong?",
                                "expression": "@not(equals(variables('refreshId'), null))",
                                "runAfter": {
                                    "For_each_refresh": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "If"
                            },
                            "For_each_refresh": {
                                "actions": {
                                    "Check_if_status_equals_notStarted": {
                                        "actions": {
                                            "Set_refreshId": {
                                                "inputs": {
                                                    "name": "refreshId",
                                                    "value": "@items('For_each_refresh')['refreshId']"
                                                },
                                                "runAfter": {},
                                                "type": "SetVariable"
                                            }
                                        },
                                        "expression": "@equals(items('For_each_refresh')['status'], 'notStarted')",
                                        "runAfter": {},
                                        "type": "If"
                                    }
                                },
                                "foreach": "@body('Parse_body_all_refreshes')",
                                "runAfter": {
                                    "Parse_body_all_refreshes": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "Foreach"
                            },
                            "GET_all_refreshes": {
                                "inputs": {
                                    "authentication": {
                                        "audience": "https://*.asazure.windows.net",
                                        "clientId": "[parameters('servicePrincipalClientId')]",
                                        "secret": "[parameters('servicePrincipalClientSecret')]",
                                        "tenant": "[parameters('azureActiveDirectoryTenantId')]",
                                        "type": "ActiveDirectoryOAuth"
                                    },
                                    "method": "GET",
                                    "uri": "[variables('analysisServicesRefreshUri')]"
                                },
                                "runAfter": {},
                                "type": "Http"
                            },
                            "Parse_body_all_refreshes": {
                                "inputs": {
                                    "content": "@body('GET_all_refreshes')",
                                    "schema": {
                                        "items": {
                                            "properties": {
                                                "endTime": {
                                                    "type": "string"
                                                },
                                                "refreshId": {
                                                    "type": "string"
                                                },
                                                "startTime": {
                                                    "type": "string"
                                                },
                                                "status": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "refreshId",
                                                "startTime",
                                                "status"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    }
                                },
                                "runAfter": {
                                    "GET_all_refreshes": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "ParseJson"
                            }
                        },
                        "description": "This block runs after success and failure of previous action! Todo: add actions to false block",
                        "expression": "@equals(outputs('POST_refresh')['statusCode'], 200)",
                        "runAfter": {
                            "POST_refresh": [
                                "Succeeded"
                            ]
                        },
                        "type": "If"
                    },
                    "Initialize_processingFinished_variable": {
                        "inputs": {
                            "variables": [
                                {
                                    "name": "processingFinished",
                                    "type": "Boolean",
                                    "value": "@false"
                                }
                            ]
                        },
                        "runAfter": {},
                        "type": "InitializeVariable"
                    },
                    "Initialize_refreshId_variable": {
                        "inputs": {
                            "variables": [
                                {
                                    "name": "refreshId",
                                    "type": "String",
                                    "value": "@{null}"
                                }
                            ]
                        },
                        "runAfter": {
                            "Initialize_upscalingFinished_variable": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable"
                    },
                    "Initialize_upscalingFinished_variable": {
                        "inputs": {
                            "variables": [
                                {
                                    "name": "upscalingFinished",
                                    "type": "Boolean",
                                    "value": "@false"
                                }
                            ]
                        },
                        "runAfter": {
                            "Initialize_processingFinished_variable": [
                                "Succeeded"
                            ]
                        },
                        "type": "InitializeVariable"
                    },
                    "POST_refresh": {
                        "inputs": {
                            "authentication": {
                                "audience": "https://*.asazure.windows.net",
                                "clientId": "[parameters('servicePrincipalClientId')]",
                                "secret": "[parameters('servicePrincipalClientSecret')]",
                                "tenant": "[parameters('azureActiveDirectoryTenantId')]",
                                "type": "ActiveDirectoryOAuth"
                            },
                            "body": {
                                "CommitMode": "transactional",
                                "MaxParallelism": 2,
                                "Objects": [
                                    {
                                        "database": "[parameters('analysisServicesModelName')]"
                                    }
                                ],
                                "RetryCount": 2,
                                "Type": "Full"
                            },
                            "method": "POST",
                            "uri": "[variables('analysisServicesRefreshUri')]"
                        },
                        "runAfter": {
                            "Until_scaling_is_finished": [
                                "Succeeded"
                            ]
                        },
                        "type": "Http"
                    },
                    "Scale_AAS_down": {
                        "inputs": {
                            "authentication": {
                                "audience": "https://management.core.windows.net/",
                                "clientId": "[parameters('servicePrincipalClientId')]",
                                "secret": "[parameters('servicePrincipalClientSecret')]",
                                "tenant": "[parameters('azureActiveDirectoryTenantId')]",
                                "type": "ActiveDirectoryOAuth"
                            },
                            "body": {
                                "sku": {
                                    "name": "[parameters('analysisServicesScaleDownLevel')]",
                                    "tier": "[parameters('analysisServicesScaleDownTier')]"
                                }
                            },
                            "method": "PATCH",
                            "uri": "[variables('analysisServicesArmUri')]"
                        },
                        "runAfter": {
                            "Check_if_POST_refresh_was_not_conflicting": [
                                "Succeeded"
                            ]
                        },
                        "type": "Http"
                    },
                    "Scale_AAS_up": {
                        "inputs": {
                            "authentication": {
                                "audience": "https://management.core.windows.net/",
                                "clientId": "[parameters('servicePrincipalClientId')]",
                                "secret": "[parameters('servicePrincipalClientSecret')]",
                                "tenant": "[parameters('azureActiveDirectoryTenantId')]",
                                "type": "ActiveDirectoryOAuth"
                            },
                            "body": {
                                "sku": {
                                    "name": "[parameters('analysisServicesScaleUpLevel')]",
                                    "tier": "[parameters('analysisServicesScaleUpTier')]"
                                }
                            },
                            "method": "PATCH",
                            "uri": "[variables('analysisServicesArmUri')]"
                        },
                        "runAfter": {
                            "Initialize_refreshId_variable": [
                                "Succeeded"
                            ]
                        },
                        "type": "Http"
                    },
                    "Until_scaling_is_finished": {
                        "actions": {
                            "Check_whether_scaling_is_finished": {
                                "actions": {
                                    "Set_variable": {
                                        "inputs": {
                                            "name": "upscalingFinished",
                                            "value": "@true"
                                        },
                                        "runAfter": {},
                                        "type": "SetVariable"
                                    }
                                },
                                "expression": "@equals(body('Parse_AAS_scaling_status')?['properties']?['provisioningState'], 'Succeeded')",
                                "runAfter": {
                                    "Parse_AAS_scaling_status": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "If"
                            },
                            "Delay": {
                                "inputs": {
                                    "interval": {
                                        "count": 1,
                                        "unit": "Minute"
                                    }
                                },
                                "runAfter": {},
                                "type": "Wait"
                            },
                            "GET_AAS_scaling_status": {
                                "inputs": {
                                    "authentication": {
                                        "audience": "https://management.core.windows.net/",
                                        "clientId": "[parameters('servicePrincipalClientId')]",
                                        "secret": "[parameters('servicePrincipalClientSecret')]",
                                        "tenant": "[parameters('azureActiveDirectoryTenantId')]",
                                        "type": "ActiveDirectoryOAuth"
                                    },
                                    "method": "GET",
                                    "uri": "[variables('analysisServicesArmUri')]"
                                },
                                "runAfter": {
                                    "Delay": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "Http"
                            },
                            "Parse_AAS_scaling_status": {
                                "inputs": {
                                    "content": "@body('GET_AAS_scaling_status')",
                                    "schema": {
                                        "properties": {
                                            "id": {
                                                "type": "string"
                                            },
                                            "location": {
                                                "type": "string"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "properties": {
                                                "properties": {
                                                    "asAdministrators": {
                                                        "properties": {
                                                            "members": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "managedMode": {
                                                        "type": "number"
                                                    },
                                                    "provisioningState": {
                                                        "type": "string"
                                                    },
                                                    "serverFullName": {
                                                        "type": "string"
                                                    },
                                                    "serverMonitorMode": {
                                                        "type": "number"
                                                    },
                                                    "state": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "sku": {
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "tier": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "tags": {
                                                "properties": {},
                                                "type": "object"
                                            },
                                            "type": {
                                                "type": "string"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "runAfter": {
                                    "GET_AAS_scaling_status": [
                                        "Succeeded"
                                    ]
                                },
                                "type": "ParseJson"
                            }
                        },
                        "expression": "@equals(variables('upscalingFinished'), true)",
                        "limit": {
                            "count": 60,
                            "timeout": "PT1H"
                        },
                        "runAfter": {
                            "Scale_AAS_up": [
                                "Succeeded"
                            ]
                        },
                        "type": "Until"
                    }
                },
                "contentVersion": "1.0.0.0",
                "outputs": {},
                "parameters": {},
                "triggers": {
                    "manual": {
                        "inputs": {
                            "schema": {}
                        },
                        "kind": "Http",
                        "type": "Request"
                    }
                }
            },
          "parameters": {}
        }
      }
    ],
    "outputs": {}
}